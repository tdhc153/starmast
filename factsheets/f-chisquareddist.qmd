---
title: "Factsheet: Chi-squared distribution"
author: Michelle Arnetta and Tom Coleman
abstract-title: Summary
abstract: A factsheet for the $\chi^2$ distribution.
filters: 
  - shinylive
embed-resources: false
categories: 
  - Statistics
---

```{r, setup, include = FALSE}
library("webexercises")
```

::: {.content-visible when-format="html"}

```{shinylive-r}
#| standalone: true
#| viewerHeight: 640

library(shiny)
library(bslib)
library(ggplot2)

ui <- page_fluid(
  title = "Chi-squared distribution calculator",
  
  layout_columns(
    col_widths = c(4, 8),
    
    # Left column - Inputs
    card(
      card_header("Parameters"),
      card_body(
        numericInput("df", "Degrees of freedom (k):", value = 3, min = 1, step = 1),
        hr(),
        radioButtons("prob_type", "Probability to calculate:",
                    choices = list("P(X ≤ x)" = "less", 
                                  "P(X ≥ x)" = "greater", 
                                  "P(x ≤ X ≤ y)" = "between"),
                    selected = "less"),
        conditionalPanel(
          condition = "input.prob_type == 'less'",
          sliderInput("x_less", "x value:", min = 0, max = 20, value = 5, step = 0.1)
        ),
        conditionalPanel(
          condition = "input.prob_type == 'greater'",
          sliderInput("x_greater", "x value:", min = 0, max = 20, value = 5, step = 0.1)
        ),
        conditionalPanel(
          condition = "input.prob_type == 'between'",
          sliderInput("x_lower", "Lower bound (x):", min = 0, max = 20, value = 2, step = 0.1),
          sliderInput("x_upper", "Upper bound (y):", min = 0, max = 20, value = 7, step = 0.1)
        )
      )
    ),
    
    # Right column - Plot
    card(
      card_header("Chi-squared distribution plot"),
      card_body(
        uiOutput("plot_title"),
        plotOutput("distPlot", height = "300px")
      )
    )
  ),
  
  # Bottom row - Results
  card(
    card_header("Results"),
    card_body(
      textOutput("explanation")
    )
  )
)

server <- function(input, output, session) {
  
  # When degrees of freedom change, adjust the range of sliders
  observe({
    # For chi-squared distribution, a reasonable upper limit for the x-axis depends on df
    # Higher df means larger values make more sense
    df <- input$df
    
    # Use a heuristic to determine a reasonable upper bound
    # This captures critical values at the 0.995 quantile
    max_x <- min(qchisq(0.995, df = df), 50)
    
    updateSliderInput(session, "x_less", max = max_x)
    updateSliderInput(session, "x_greater", max = max_x)
    updateSliderInput(session, "x_lower", max = max_x)
    updateSliderInput(session, "x_upper", max = max_x)
  })
  
  # Ensure that x_upper is always greater than or equal to x_lower
  observe({
    if (input$x_upper < input$x_lower) {
      updateSliderInput(session, "x_upper", value = input$x_lower)
    }
  })
  
  # Display the plot title with distribution parameters
  output$plot_title <- renderUI({
    title <- sprintf("Chi-Squared(k = %d)", input$df)
    tags$h4(title, style = "text-align: center; margin-bottom: 15px;")
  })
  
  # Calculate the probability based on user selection
  probability <- reactive({
    if (input$prob_type == "less") {
      prob <- pchisq(input$x_less, df = input$df)
      explanation <- sprintf("P(X ≤ %.1f) = %.6f or %.4f%%", 
                           input$x_less, prob, prob * 100)
      return(list(prob = prob, explanation = explanation, type = "less", x = input$x_less))
      
    } else if (input$prob_type == "greater") {
      prob <- 1 - pchisq(input$x_greater, df = input$df)
      explanation <- sprintf("P(X ≥ %.1f) = %.6f or %.4f%%", 
                           input$x_greater, prob, prob * 100)
      return(list(prob = prob, explanation = explanation, type = "greater", x = input$x_greater))
      
    } else if (input$prob_type == "between") {
      if (input$x_lower == input$x_upper) {
        # For continuous distributions, P(X = a) = 0
        prob <- 0
      } else {
        upper_prob <- pchisq(input$x_upper, df = input$df)
        lower_prob <- pchisq(input$x_lower, df = input$df)
        prob <- upper_prob - lower_prob
      }
      explanation <- sprintf("P(%.1f ≤ X ≤ %.1f) = %.6f or %.4f%%", 
                           input$x_lower, input$x_upper, prob, prob * 100)
      return(list(prob = prob, explanation = explanation, type = "between", 
                 lower = input$x_lower, upper = input$x_upper))
    }
  })
  
  # Display an explanation of the calculation
  output$explanation <- renderText({
    res <- probability()
    return(res$explanation)
  })
  
  # Generate the chi-squared distribution plot
  output$distPlot <- renderPlot({
    # Get parameters
    df_val <- input$df
    
    # Determine a reasonable max for x-axis based on df
    max_x <- min(qchisq(0.995, df = df_val), 50)
    
    # Create data frame for plotting - avoid x=0 when df=1 as density is infinite there
    x_min <- if(df_val == 1) 0.01 else 0
    x_values <- seq(x_min, max_x, length.out = 500)
    density_values <- dchisq(x_values, df = df_val)
    plot_df <- data.frame(x = x_values, density = density_values)
    
    # Create base plot
    p <- ggplot(plot_df, aes(x = x, y = density)) +
      geom_line(size = 1, color = "darkgray") +
      labs(x = "X", y = "probability density function") +
      theme_minimal() +
      theme(panel.grid.minor = element_blank()) +
      xlim(0, max_x)
    
    # Add shaded area based on selected probability type
    res <- probability()
    
    if (res$type == "less") {
      # Create data for the filled area
      fill_x <- seq(x_min, res$x, length.out = 200)
      fill_y <- dchisq(fill_x, df = df_val)
      fill_df <- data.frame(x = fill_x, density = fill_y)
      
      p <- p + geom_area(data = fill_df, aes(x = x, y = density), 
                        fill = "#3F6BB6", alpha = 0.6)
      
    } else if (res$type == "greater") {
      # Create data for the filled area
      fill_x <- seq(res$x, max_x, length.out = 200)
      fill_y <- dchisq(fill_x, df = df_val)
      fill_df <- data.frame(x = fill_x, density = fill_y)
      
      p <- p + geom_area(data = fill_df, aes(x = x, y = density), 
                        fill = "#3F6BB6", alpha = 0.6)
      
    } else if (res$type == "between") {
      # Create data for the filled area
      fill_x <- seq(res$lower, res$upper, length.out = 200)
      fill_y <- dchisq(fill_x, df = df_val)
      fill_df <- data.frame(x = fill_x, density = fill_y)
      
      p <- p + geom_area(data = fill_df, aes(x = x, y = density), 
                        fill = "#3F6BB6", alpha = 0.6)
    }
    
    return(p)
  })
}

shinyApp(ui = ui, server = server)
```

:::

::: {.content-hidden when-format="html"}

![An example of the chi-squared distribution with $k = 5$.](./FiguresPNG/f-chisquareddist.png){width="80%"}

:::

**Where to use:** The $\chi^2$ distribution is used for hypothesis testing, such as for goodness of fit tests and tests for independence. (See [Guide: Introduction to hypothesis testing](../studyguides/hypothesistesting.qmd) for more.) It is a special case of the gamma distribution, as $\chi^2(k)=\textrm{Gam}(\frac{k}{2},2)$.

**Notation:** $X \sim \chi^2(k)$

**Parameter:** The integer $k$ is the number of degrees of freedom in the sample.

| Quantity | Value | Notes |
|:--------|:----------------------------|:-------------------|
| **Mean** | $\mathbb{E}(X) = k$ |  |
| **Variance** | $\mathbb{V}(X) = 2k$ |  |
| **PDF** | $\mathbb{P}(X=x)=\dfrac{x^{\frac{k}{2}-1}\exp\left({-\frac{x}{2}}\right)}{2^\frac{k}{2}\Gamma\left(\frac{k}{2}\right)}$ | $\Gamma(x)$ is the gamma function |
| **CDF** | $\mathbb{P}(X \leq x)=\dfrac{1}{\Gamma\left(\frac{k}{2}\right)}\textrm{Gam}\left(\frac{k}{2},\frac{x}{2}\right)$ | $\Gamma(x)$ is the gamma function, $\textrm{Gam}(\alpha,\theta)$ is the PDF of the gamma distribution |

**Examples:**

-   **Goodness of fit example:** You have a six-sided die with six possible outcomes: $1, 2, 3, 4, 5,$ and $6$. You calculate the expected frequencies of each outcome. Then you roll the die many times and record the observed frequencies of each outcome. Since there are 6 categories, $$\textsf{degrees of freedom = number of categories} - 1 = 6 - 1 = 5$$ This can be expressed as $X \sim \chi^2(5)$, meaning the degrees of freedom is $5$.

-   **Test for independence example:** You are investigating whether there is a correlation between two variables: candy colour and flavour. You have $5$ categories of colours and 3 categories of flavours. Calculating the degrees of freedom can be done with the formula: $$(\textsf{categories of colours} - 1)(\textsf{categories of flavours} - 1) = (5-1)(3-1)=(4)(2)=8.$$ You can model $X \sim \chi^2(8)$, meaning that there are $8$ degrees of freedom.

# Further reading {-}

[This interactive element appears in Overview: Probability distributions. Please click this link to go to the guide.](../overviews/o-distributions.qmd)

## Version history {-}

v1.0: initial version created 04/25 by tdhc and Michelle Arnetta as part of a University of St Andrews VIP project.

  - v1.1: moved to factsheet form and populated with material from [Overview: Probability distributions](../overviews/o-distributions.qmd) by tdhc.
  
[This work is licensed under CC BY-NC-SA 4.0.](https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1)



