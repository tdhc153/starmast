{
  "hash": "c2d17ad3b3af7897baba6c2cbfa40c95",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Calculator: $Z$-testing\"\nauthor: Tom Coleman\nformat: html\nabstract-title: Summary\nabstract: A calculator to provide $p$-values when a $Z$-test is being used.\nfilters: \n  - shinylive\n---\n\n\n\n\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 620\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(ggplot2)\n\nui <- page_fluid(\n  title = \"Z-Test Calculator\",\n  \n  layout_columns(\n    col_widths = c(4, 8),\n    \n    # Left column - Input parameters\n    card(\n      card_header(\"Input Parameters\"),\n      card_body(\n        numericInput(\"zscore\", \"Z-score\", value = 1.96, step = 0.01),\n        radioButtons(\"test_type\", \"Test Type\",\n                    choices = list(\"Two-tailed\" = \"two\",\n                                  \"One-tailed (upper)\" = \"upper\",\n                                  \"One-tailed (lower)\" = \"lower\"),\n                    selected = \"two\"),\n        hr(),\n        helpText(\"This app calculates p-values for Z-tests based on the standard normal distribution.\")\n      )\n    ),\n    \n    # Right column - Graphical representation\n    card(\n      card_header(\"Graphical Representation\"),\n      card_body(\n        plotOutput(\"density_plot\", height = \"300px\")\n      )\n    )\n  ),\n  \n  # Results at the bottom\n  card(\n    card_header(\"Z-Test Results\"),\n    card_body(\n      verbatimTextOutput(\"pvalue_result\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Calculate p-value based on test type\n  p_value <- reactive({\n    z <- input$zscore\n    test <- input$test_type\n    \n    if (test == \"two\") {\n      p <- 2 * pnorm(-abs(z))\n      result <- paste0(\"Two-tailed p-value: \", round(p, 6))\n    } else if (test == \"upper\") {\n      p <- pnorm(z, lower.tail = FALSE)\n      result <- paste0(\"Upper-tailed p-value: \", round(p, 6))\n    } else if (test == \"lower\") {\n      p <- pnorm(z, lower.tail = TRUE)\n      result <- paste0(\"Lower-tailed p-value: \", round(p, 6))\n    }\n    \n    return(list(p = p, result = result, test = test))\n  })\n  \n  # Display p-value\n  output$pvalue_result <- renderText({\n    p_value()$result\n  })\n  \n  # Create density plot\n  output$density_plot <- renderPlot({\n    z <- input$zscore\n    test <- p_value()$test\n    \n    # Generate x values for normal distribution\n    x <- seq(-4, 4, length.out = 1000)\n    y <- dnorm(x)\n    df <- data.frame(x = x, y = y)\n    \n    # Base plot\n    p <- ggplot(df, aes(x = x, y = y)) +\n      geom_line() +\n      labs(x = \"Z-score\", y = \"Density\") +\n      theme_minimal() +\n      theme(panel.grid.minor = element_blank()) +\n      geom_vline(xintercept = 0, linetype = \"dashed\", alpha = 0.5)\n    \n    # Add shaded area based on test type, using #3F6BB6 as the color\n    if (test == \"two\") {\n      # Two-tailed test: shade both tails\n      if (z > 0) {\n        p <- p + \n          geom_area(data = subset(df, x >= z), aes(x = x, y = y), fill = \"#3F6BB6\", alpha = 0.5) +\n          geom_area(data = subset(df, x <= -z), aes(x = x, y = y), fill = \"#3F6BB6\", alpha = 0.5) +\n          geom_vline(xintercept = z, color = \"#3F6BB6\") +\n          geom_vline(xintercept = -z, color = \"#3F6BB6\")\n      } else {\n        p <- p + \n          geom_area(data = subset(df, x <= z), aes(x = x, y = y), fill = \"#3F6BB6\", alpha = 0.5) +\n          geom_area(data = subset(df, x >= -z), aes(x = x, y = y), fill = \"#3F6BB6\", alpha = 0.5) +\n          geom_vline(xintercept = z, color = \"#3F6BB6\") +\n          geom_vline(xintercept = -z, color = \"#3F6BB6\")\n      }\n    } else if (test == \"upper\") {\n      # Upper-tailed test: shade area above z\n      p <- p + \n        geom_area(data = subset(df, x >= z), aes(x = x, y = y), fill = \"#3F6BB6\", alpha = 0.5) +\n        geom_vline(xintercept = z, color = \"#3F6BB6\")\n    } else if (test == \"lower\") {\n      # Lower-tailed test: shade area below z\n      p <- p + \n        geom_area(data = subset(df, x <= z), aes(x = x, y = y), fill = \"#3F6BB6\", alpha = 0.5) +\n        geom_vline(xintercept = z, color = \"#3F6BB6\")\n    }\n    \n    return(p)\n  })\n}\n\nshinyApp(ui, server)\n```\n\n# Further reading {-}\n\n[This interactive element appears in Guide: Introduction to hypothesis testing. Please click this link to go to the guide.](../studyguides/hypothesistesting.qmd)\n\n## Version history {-}\n\nv1.0: initial version created 12/24 by Ellie Trace as part of a University of St Andrews VIP project.\n\n  - v1.1: updated to R Shiny interface by tdhc 04/25.\n  \n[This work is licensed under CC BY-NC-SA 4.0.](https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}