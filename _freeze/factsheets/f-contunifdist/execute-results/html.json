{
  "hash": "a92f1acc91db11b53652e08f6bdc1043",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Factsheet: Continuous uniform distribution\"\nauthor: Michelle Arnetta and Tom Coleman\nabstract-title: Summary\nabstract: A factsheet for the continuous uniform distribution.\nfilters: \n  - shinylive\nembed-resources: false\ncategories: \n  - Statistics\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.content-visible when-format=\"html\"}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 750\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(ggplot2)\n\nui <- page_fluid(\n  title = \"Continuous uniform distribution calculator\",\n  \n  layout_columns(\n    col_widths = c(4, 8),\n    \n    # Left column - Inputs\n    card(\n      card_header(\"Parameters\"),\n      card_body(\n        numericInput(\"a\", \"Minimum value (a):\", value = 0, step = 0.1),\n        numericInput(\"b\", \"Maximum value (b):\", value = 10, step = 0.1),\n        hr(),\n        radioButtons(\"prob_type\", \"Probability to Calculate:\",\n                    choices = list(\"P(X ≤ x)\" = \"less\", \n                                  \"P(X ≥ x)\" = \"greater\", \n                                  \"P(x ≤ X ≤ y)\" = \"between\"),\n                    selected = \"less\"),\n        conditionalPanel(\n          condition = \"input.prob_type == 'less' || input.prob_type == 'greater'\",\n          sliderInput(\"x_value\", \"x value:\", min = 0, max = 10, value = 5, step = 0.1)\n        ),\n        conditionalPanel(\n          condition = \"input.prob_type == 'between'\",\n          sliderInput(\"x_lower\", \"Lower bound (x):\", min = 0, max = 10, value = 3, step = 0.1),\n          sliderInput(\"x_upper\", \"Upper bound (y):\", min = 0, max = 10, value = 7, step = 0.1)\n        )\n      )\n    ),\n    \n    # Right column - Plot\n    card(\n      card_header(\"Continuous uniform distribution plot\"),\n      card_body(\n        uiOutput(\"plot_title\"),\n        plotOutput(\"distPlot\", height = \"300px\")\n      )\n    )\n  ),\n  \n  # Bottom row - Results\n  card(\n    card_header(\"Results\"),\n    card_body(\n      textOutput(\"explanation\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Ensure b is always greater than a\n  observe({\n    if (input$b <= input$a) {\n      updateNumericInput(session, \"b\", value = input$a + 1)\n    }\n  })\n  \n  # Update the range of the sliders when a or b changes\n  observe({\n    updateSliderInput(session, \"x_value\", min = input$a, max = input$b, value = min(max(input$a, (input$a + input$b)/2), input$b))\n    updateSliderInput(session, \"x_lower\", min = input$a, max = input$b, value = min(max(input$a, input$a + (input$b - input$a)/3), input$b))\n    updateSliderInput(session, \"x_upper\", min = input$a, max = input$b, value = min(max(input$a, input$a + 2*(input$b - input$a)/3), input$b))\n  })\n  \n  # Ensure that x_upper is always greater than or equal to x_lower\n  observe({\n    if (input$x_upper < input$x_lower) {\n      updateSliderInput(session, \"x_upper\", value = input$x_lower)\n    }\n  })\n  \n  # Display the plot title with distribution parameters\n  output$plot_title <- renderUI({\n    title <- sprintf(\"Unif(a = %.1f, b = %.1f)\", input$a, input$b)\n    tags$h4(title, style = \"text-align: center; margin-bottom: 15px;\")\n  })\n  \n  # Calculate the probability based on user selection\n  probability <- reactive({\n    if (input$prob_type == \"less\") {\n      prob <- punif(input$x_value, min = input$a, max = input$b)\n      explanation <- sprintf(\"P(X ≤ %.2f) = %.4f or %.2f%%\", \n                            input$x_value, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"less\", x = input$x_value))\n      \n    } else if (input$prob_type == \"greater\") {\n      prob <- 1 - punif(input$x_value, min = input$a, max = input$b)\n      explanation <- sprintf(\"P(X ≥ %.2f) = %.4f or %.2f%%\", \n                            input$x_value, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"greater\", x = input$x_value))\n      \n    } else if (input$prob_type == \"between\") {\n      upper_prob <- punif(input$x_upper, min = input$a, max = input$b)\n      lower_prob <- punif(input$x_lower, min = input$a, max = input$b)\n      prob <- upper_prob - lower_prob\n      \n      explanation <- sprintf(\"P(%.2f ≤ X ≤ %.2f) = %.4f or %.2f%%\", \n                            input$x_lower, input$x_upper, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"between\", \n                 lower = input$x_lower, upper = input$x_upper))\n    }\n  })\n  \n  # Display an explanation of the calculation\n  output$explanation <- renderText({\n    res <- probability()\n    return(res$explanation)\n  })\n  \n  # Generate the continuous uniform distribution plot\n  output$distPlot <- renderPlot({\n    # Create data frame for plotting the PDF\n    x_range <- seq(input$a - 0.5 * (input$b - input$a), \n                   input$b + 0.5 * (input$b - input$a), \n                   length.out = 1000)\n    \n    pdf_values <- dunif(x_range, min = input$a, max = input$b)\n    df <- data.frame(x = x_range, density = pdf_values)\n    \n    # Create base plot\n    p <- ggplot(df, aes(x = x, y = density)) +\n      geom_line(color = \"darkgray\", size = 1.2) +\n      labs(x = \"X\", y = \"probability density function\") +\n      theme_minimal() +\n      theme(panel.grid.minor = element_blank()) +\n      ylim(0, max(pdf_values) * 1.1)\n    \n    # Add shaded area based on selected probability type\n    res <- probability()\n    \n    if (res$type == \"less\") {\n      shade_x <- seq(input$a, res$x, length.out = 100)\n      shade_y <- dunif(shade_x, min = input$a, max = input$b)\n      shade_df <- data.frame(x = c(input$a, shade_x, res$x), \n                            y = c(0, shade_y, 0))\n      \n      p <- p + geom_polygon(data = shade_df, aes(x = x, y = y), \n                           fill = \"#3F6BB6\", alpha = 0.6)\n      \n    } else if (res$type == \"greater\") {\n      shade_x <- seq(res$x, input$b, length.out = 100)\n      shade_y <- dunif(shade_x, min = input$a, max = input$b)\n      shade_df <- data.frame(x = c(res$x, shade_x, input$b), \n                            y = c(0, shade_y, 0))\n      \n      p <- p + geom_polygon(data = shade_df, aes(x = x, y = y), \n                           fill = \"#3F6BB6\", alpha = 0.6)\n      \n    } else if (res$type == \"between\") {\n      shade_x <- seq(res$lower, res$upper, length.out = 100)\n      shade_y <- dunif(shade_x, min = input$a, max = input$b)\n      shade_df <- data.frame(x = c(res$lower, shade_x, res$upper), \n                            y = c(0, shade_y, 0))\n      \n      p <- p + geom_polygon(data = shade_df, aes(x = x, y = y), \n                           fill = \"#3F6BB6\", alpha = 0.6)\n    }\n    \n    return(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n:::\n\n::: {.content-hidden when-format=\"html\"}\n\n![An example of the continuous uniform distribution with $a = -10$ and $b = 20$.](./FiguresPNG/f-contunifdist.png){width=\"80%\"}\n\n:::\n\n**Where to use:** The continuous uniform distribution is used when all continuous values $x$ in the interval $a$ to $b$ are equally likely. The random variable $X$ represents the outcome.\n\n**Notation:** $X \\sim \\textrm{Uniform}(a,b)$ or $X \\sim U(a,b)$.\n\n**Parameters:** Two real numbers $a,b$, where\n\n-   $a$ is the minimum value of an outcome,\n\n-   $b$ is the maximum value of an outcome.\n\n| Quantity | Value | Notes |\n|:--------|:----------------------------|:-------------------|\n| **Mean** | $\\mathbb{E}(X) = \\dfrac{a+b}{2}$ |  |\n| **Variance** | $\\mathbb{V}(X) = \\dfrac{(b-a)^2}{12}$ |  |\n| **PDF** | $\\mathbb{P}(X=x)=\\begin{cases} \\dfrac{1}{b-a} & \\textsf{if } a \\leq x \\leq b \\\\0 & \\textsf{otherwise}\\end{cases}$ |  |\n| **CDF** | $\\displaystyle\\mathbb{P}(X\\leq x)=\\begin{cases} 0 & \\textsf{if } x< a \\\\\\dfrac{x-a}{b-a} & \\textsf{if } a\\leq x\\leq b \\\\1 & \\textsf{if } x>b \\end{cases}$ |  |\n\n**Example:** A machine from Cantor's Confectionery is programmed to chop long candy bars into pieces, each with a length between 30 millimetres to 50 millimetres. Due to variations in the machine, each continuous value between this interval is equally likely. This can be expressed as $X \\sim U(30,50)$. It means 30 is the minimum value and 50 is the maximum value, where all continuous values of $X$ for $30 \\leq x \\leq 50$ are equally likely.\n\n# Further reading {-}\n\nThis interactive element appears in [Overview: Probability distributions.](../overviews/o-distributions.qmd) \n\n## Version history {-}\n\nv1.0: initial version created 08/25 by tdhc.\n  \n[This work is licensed under CC BY-NC-SA 4.0.](https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}