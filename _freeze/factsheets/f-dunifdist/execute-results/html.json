{
  "hash": "e7377996ea209a11543941d291815e90",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Factsheet: Discrete uniform distribution\"\nauthor: Michelle Arnetta and Tom Coleman\nabstract-title: Summary\nabstract: A factsheet for the discrete uniform distribution.\nfilters: \n  - shinylive\nembed-resources: false\ncategories: \n  - Statistics\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.content-visible when-format=\"html\"}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 750\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(ggplot2)\n\nui <- page_fluid(\n  title = \"Discrete Uniform distribution calculator\",\n  \n  layout_columns(\n    col_widths = c(4, 8),\n    \n    # Left column - Inputs\n    card(\n      card_header(\"Parameters\"),\n      card_body(\n        numericInput(\"a\", \"Minimum value (a):\", value = 1, step = 1),\n        numericInput(\"b\", \"Maximum value (b):\", value = 10, step = 1),\n        hr(),\n        radioButtons(\"prob_type\", \"Probability to Calculate:\",\n                    choices = list(\"P(X ≤ x)\" = \"less\", \n                                  \"P(X ≥ x)\" = \"greater\", \n                                  \"P(x ≤ X ≤ y)\" = \"between\"),\n                    selected = \"less\"),\n        conditionalPanel(\n          condition = \"input.prob_type == 'less' || input.prob_type == 'greater'\",\n          sliderInput(\"x_value\", \"x value:\", min = 1, max = 10, value = 5, step = 1)\n        ),\n        conditionalPanel(\n          condition = \"input.prob_type == 'between'\",\n          sliderInput(\"x_lower\", \"Lower bound (x):\", min = 1, max = 10, value = 3, step = 1),\n          sliderInput(\"x_upper\", \"Upper bound (y):\", min = 1, max = 10, value = 7, step = 1)\n        )\n      )\n    ),\n    \n    # Right column - Plot\n    card(\n      card_header(\"Discrete Uniform distribution plot\"),\n      card_body(\n        uiOutput(\"plot_title\"),\n        plotOutput(\"distPlot\", height = \"300px\")\n      )\n    )\n  ),\n  \n  # Bottom row - Results\n  card(\n    card_header(\"Results\"),\n    card_body(\n      textOutput(\"explanation\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Ensure b is always greater than or equal to a\n  observe({\n    if (input$b < input$a) {\n      updateNumericInput(session, \"b\", value = input$a)\n    }\n  })\n  \n  # Update the range of the sliders when a or b changes\n  observe({\n    updateSliderInput(session, \"x_value\", min = input$a, max = input$b, value = min(max(input$a, 5), input$b))\n    updateSliderInput(session, \"x_lower\", min = input$a, max = input$b, value = min(max(input$a, 3), input$b))\n    updateSliderInput(session, \"x_upper\", min = input$a, max = input$b, value = min(max(input$a, 7), input$b))\n  })\n  \n  # Ensure that x_upper is always greater than or equal to x_lower\n  observe({\n    if (input$x_upper < input$x_lower) {\n      updateSliderInput(session, \"x_upper\", value = input$x_lower)\n    }\n  })\n  \n  # Display the plot title with distribution parameters\n  output$plot_title <- renderUI({\n    title <- sprintf(\"DUnif(a = %d, b = %d)\", input$a, input$b)\n    tags$h4(title, style = \"text-align: center; margin-bottom: 15px;\")\n  })\n  \n  # Discrete uniform probability mass function\n  ddunif <- function(x, min, max) {\n    ifelse(x >= min & x <= max & x == round(x), 1/(max - min + 1), 0)\n  }\n  \n  # Discrete uniform cumulative distribution function\n  pdunif <- function(q, min, max) {\n    ifelse(q < min, 0, \n           ifelse(q >= max, 1, \n                  (floor(q) - min + 1) / (max - min + 1)))\n  }\n  \n  # Calculate the probability based on user selection\n  probability <- reactive({\n    if (input$prob_type == \"less\") {\n      prob <- pdunif(input$x_value, input$a, input$b)\n      explanation <- sprintf(\"P(X ≤ %d) = %.4f or %.2f%%\", \n                            input$x_value, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"less\", x = input$x_value))\n      \n    } else if (input$prob_type == \"greater\") {\n      # For P(X ≥ x), we need 1 - P(X < x) = 1 - P(X ≤ x-1)\n      if (input$x_value <= input$a) {\n        prob <- 1  # P(X ≥ a) is always 1 for discrete uniform\n      } else {\n        prob <- 1 - pdunif(input$x_value - 1, input$a, input$b)\n      }\n      explanation <- sprintf(\"P(X ≥ %d) = %.4f or %.2f%%\", \n                            input$x_value, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"greater\", x = input$x_value))\n      \n    } else if (input$prob_type == \"between\") {\n      if (input$x_lower == input$x_upper) {\n        # Exact probability for a single value\n        prob <- ddunif(input$x_lower, input$a, input$b)\n      } else {\n        # P(x_lower ≤ X ≤ x_upper) = P(X ≤ x_upper) - P(X < x_lower) = P(X ≤ x_upper) - P(X ≤ x_lower-1)\n        upper_prob <- pdunif(input$x_upper, input$a, input$b)\n        if (input$x_lower <= input$a) {\n          lower_prob <- 0\n        } else {\n          lower_prob <- pdunif(input$x_lower - 1, input$a, input$b)\n        }\n        prob <- upper_prob - lower_prob\n      }\n      explanation <- sprintf(\"P(%d ≤ X ≤ %d) = %.4f or %.2f%%\", \n                            input$x_lower, input$x_upper, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"between\", \n                 lower = input$x_lower, upper = input$x_upper))\n    }\n  })\n  \n  # Display an explanation of the calculation\n  output$explanation <- renderText({\n    res <- probability()\n    return(res$explanation)\n  })\n  \n  # Generate the discrete uniform distribution plot\n  output$distPlot <- renderPlot({\n    # Create data frame for plotting\n    x_values <- input$a:input$b\n    prob_mass <- rep(1/(input$b - input$a + 1), length(x_values))\n    df <- data.frame(x = x_values, probability = prob_mass)\n    \n    # Create base plot\n    p <- ggplot(df, aes(x = x, y = probability)) +\n      geom_col(fill = \"lightgray\", color = \"darkgray\", alpha = 0.7) +\n      labs(x = \"X\", y = \"probability mass function\") +\n      theme_minimal() +\n      theme(panel.grid.minor = element_blank()) +\n      scale_x_continuous(breaks = x_values) +\n      ylim(0, max(prob_mass) * 1.1)\n    \n    # Add shaded area based on selected probability type\n    res <- probability()\n    \n    if (res$type == \"less\") {\n      highlight_x <- input$a:res$x\n      highlight_df <- df[df$x %in% highlight_x, ]\n      \n      p <- p + geom_col(data = highlight_df, aes(x = x, y = probability), \n                       fill = \"#3F6BB6\", color = \"darkgray\", alpha = 0.8)\n      \n    } else if (res$type == \"greater\") {\n      highlight_x <- res$x:input$b\n      highlight_df <- df[df$x %in% highlight_x, ]\n      \n      p <- p + geom_col(data = highlight_df, aes(x = x, y = probability), \n                       fill = \"#3F6BB6\", color = \"darkgray\", alpha = 0.8)\n      \n    } else if (res$type == \"between\") {\n      highlight_x <- res$lower:res$upper\n      highlight_df <- df[df$x %in% highlight_x, ]\n      \n      p <- p + geom_col(data = highlight_df, aes(x = x, y = probability), \n                       fill = \"#3F6BB6\", color = \"darkgray\", alpha = 0.8)\n    }\n    \n    return(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n:::\n\n::: {.content-hidden when-format=\"html\"}\n\n![An example of the discrete uniform distribution with $a= 1$ and $b = 6$.](./FiguresPNG/f-dunifdist.png){width=\"80%\"}\n\n:::\n\n**Where to use:** The discrete uniform distribution is used when all integer outcomes $x$ in the interval $a$ to $b$ are equally likely. $X$ is a random variable for integer outcomes $x$ where for $a \\leq x \\leq b$, and the probability of each outcome $1/n$, where $n = b - a + 1$.\n\n**Notation:** $X \\sim \\textrm{Uniform}(a,b)$ or $X \\sim U(a,b)$\n\n**Parameters:** The numbers $a,b$ are integers where\n\n-   $a$ is the minimum value of an outcome\n-   $b$ is the maximum value of an outcome\n\nThere are $n$ outcomes in total, with $n = b - a + 1$.\n\n| Quantity | Value | Notes |\n|:--------|:----------------------------|:-------------------|\n| **Mean** | $\\mathbb{E}(X) = \\dfrac{a+b}{2}.$ |  |\n| **Variance** | $\\mathbb{V}(X) = \\dfrac{n^2-1}{12}.$ |  |\n| **PMF** | $\\mathbb{P}(X=x)=\\frac{1}{n}$ |  |\n| **CDF** | $\\mathbb{P}(X\\leq x)= \\begin{cases} 0 & \\textsf{if } x \\leq a \\\\\\dfrac{\\lfloor x \\rfloor - a + 1}{n} & \\textsf{if } a< x<b \\\\1 & \\textsf{if } x \\geq b \\end{cases}$ | $\\lfloor x \\rfloor$ is the **floor function** |\n\n**Example:** You roll a fair six-sided die, where all outcomes ($1, 2, 3, 4, 5,$ and $6$) are equally likely. This can be expressed as $X \\sim U(1,6)$. It means $1$ is the minimum value and $6$ is the maximum value, where all discrete values of $X$ for $1 \\leq x \\leq 6$ are equally likely.\n\n\n# Further reading {-}\n\nThis interactive element appears in [Overview: Probability distributions.](../overviews/o-distributions.qmd) \n\n## Version history {-}\n\nv1.0: initial version created 08/25 by tdhc.\n  \n[This work is licensed under CC BY-NC-SA 4.0.](https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}