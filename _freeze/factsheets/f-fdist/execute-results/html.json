{
  "hash": "f2c45e4e40c3466d0239de6a56ddb1dc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Factsheet: $F$-distribution\"\nauthor: Michelle Arnetta and Tom Coleman\nabstract-title: Summary\nabstract: A factsheet for the $F$-distribution.\nfilters: \n  - shinylive\nembed-resources: false\ncategories: \n  - Statistics\n---\n\n\n\n\n\n\n\n\n\n\n\n\n\n::: {.content-visible when-format=\"html\"}\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 760\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(ggplot2)\n\nui <- page_fluid(\n  title = \"F-distribution calculator\",\n  \n  layout_columns(\n    col_widths = c(4, 8),\n    \n    # Left column - Inputs\n    card(\n      card_header(\"Parameters\"),\n      card_body(\n        numericInput(\"df1\", \"Numerator degrees of freedom (d₁):\", value = 5, min = 1, step = 1),\n        numericInput(\"df2\", \"Denominator degrees of freedom (d₂):\", value = 10, min = 1, step = 1),\n        hr(),\n        radioButtons(\"prob_type\", \"Probability to calculate:\",\n                    choices = list(\"P(X ≤ x)\" = \"less\", \n                                  \"P(X ≥ x)\" = \"greater\", \n                                  \"P(x ≤ X ≤ y)\" = \"between\"),\n                    selected = \"less\"),\n        conditionalPanel(\n          condition = \"input.prob_type == 'less'\",\n          sliderInput(\"x_less\", \"x value:\", min = 0, max = 10, value = 1, step = 0.1)\n        ),\n        conditionalPanel(\n          condition = \"input.prob_type == 'greater'\",\n          sliderInput(\"x_greater\", \"x value:\", min = 0, max = 10, value = 1, step = 0.1)\n        ),\n        conditionalPanel(\n          condition = \"input.prob_type == 'between'\",\n          sliderInput(\"x_lower\", \"Lower bound (x):\", min = 0, max = 10, value = 0.5, step = 0.1),\n          sliderInput(\"x_upper\", \"Upper bound (y):\", min = 0, max = 10, value = 2, step = 0.1)\n        )\n      )\n    ),\n    \n    # Right column - Plot\n    card(\n      card_header(\"F-distribution plot\"),\n      card_body(\n        uiOutput(\"plot_title\"),\n        plotOutput(\"distPlot\", height = \"300px\")\n      )\n    )\n  ),\n  \n  # Bottom row - Results\n  card(\n    card_header(\"Results\"),\n    card_body(\n      textOutput(\"explanation\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # When degrees of freedom change, adjust the range of sliders\n  observe({\n    # For F distribution, a reasonable upper limit for the x-axis depends on degrees of freedom\n    # Higher df means smaller values make more sense\n    df1 <- input$df1\n    df2 <- input$df2\n    \n    # Use a heuristic to determine a reasonable upper bound\n    # This captures critical values at the 0.999 quantile\n    max_x <- min(qf(0.999, df1, df2), 10)\n    \n    updateSliderInput(session, \"x_less\", max = max_x)\n    updateSliderInput(session, \"x_greater\", max = max_x)\n    updateSliderInput(session, \"x_lower\", max = max_x)\n    updateSliderInput(session, \"x_upper\", max = max_x)\n  })\n  \n  # Ensure that x_upper is always greater than or equal to x_lower\n  observe({\n    if (input$x_upper < input$x_lower) {\n      updateSliderInput(session, \"x_upper\", value = input$x_lower)\n    }\n  })\n  \n  # Display the plot title with distribution parameters\n  output$plot_title <- renderUI({\n    title <- sprintf(\"F-distribution(d₁ = %d, d₂ = %d)\", input$df1, input$df2)\n    tags$h4(title, style = \"text-align: center; margin-bottom: 15px;\")\n  })\n  \n  # Calculate the probability based on user selection\n  probability <- reactive({\n    if (input$prob_type == \"less\") {\n      prob <- pf(input$x_less, df1 = input$df1, df2 = input$df2)\n      explanation <- sprintf(\"P(X ≤ %.1f) = %.6f or %.4f%%\", \n                           input$x_less, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"less\", x = input$x_less))\n      \n    } else if (input$prob_type == \"greater\") {\n      prob <- 1 - pf(input$x_greater, df1 = input$df1, df2 = input$df2)\n      explanation <- sprintf(\"P(X ≥ %.1f) = %.6f or %.4f%%\", \n                           input$x_greater, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"greater\", x = input$x_greater))\n      \n    } else if (input$prob_type == \"between\") {\n      if (input$x_lower == input$x_upper) {\n        # For continuous distributions, P(X = a) = 0\n        prob <- 0\n      } else {\n        upper_prob <- pf(input$x_upper, df1 = input$df1, df2 = input$df2)\n        lower_prob <- pf(input$x_lower, df1 = input$df1, df2 = input$df2)\n        prob <- upper_prob - lower_prob\n      }\n      explanation <- sprintf(\"P(%.1f ≤ X ≤ %.1f) = %.6f or %.4f%%\", \n                           input$x_lower, input$x_upper, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"between\", \n                 lower = input$x_lower, upper = input$x_upper))\n    }\n  })\n  \n  # Display an explanation of the calculation\n  output$explanation <- renderText({\n    res <- probability()\n    return(res$explanation)\n  })\n  \n  # Generate the F-distribution plot\n  output$distPlot <- renderPlot({\n    # Get parameters\n    df1 <- input$df1\n    df2 <- input$df2\n    \n    # Determine a reasonable max for x-axis based on df values\n    max_x <- min(qf(0.999, df1, df2), 10)\n    \n    # Create data frame for plotting\n    x_values <- seq(0.01, max_x, length.out = 500)  # Avoid x=0 since df(0) is undefined\n    density_values <- df(x_values, df1 = df1, df2 = df2)\n    plot_df <- data.frame(x = x_values, density = density_values)\n    \n    # Create base plot\n    p <- ggplot(plot_df, aes(x = x, y = density)) +\n      geom_line(size = 1, color = \"darkgray\") +\n      labs(x = \"X\", y = \"probability density function\") +\n      theme_minimal() +\n      theme(panel.grid.minor = element_blank()) +\n      xlim(0, max_x)\n    \n    # Add shaded area based on selected probability type\n    res <- probability()\n    \n    if (res$type == \"less\") {\n      # Create data for the filled area\n      fill_x <- seq(0.01, res$x, length.out = 200)\n      fill_y <- df(fill_x, df1 = df1, df2 = df2)\n      fill_df <- data.frame(x = fill_x, density = fill_y)\n      \n      p <- p + geom_area(data = fill_df, aes(x = x, y = density), \n                        fill = \"#3F6BB6\", alpha = 0.6)\n      \n    } else if (res$type == \"greater\") {\n      # Create data for the filled area\n      fill_x <- seq(res$x, max_x, length.out = 200)\n      fill_y <- df(fill_x, df1 = df1, df2 = df2)\n      fill_df <- data.frame(x = fill_x, density = fill_y)\n      \n      p <- p + geom_area(data = fill_df, aes(x = x, y = density), \n                        fill = \"#3F6BB6\", alpha = 0.6)\n      \n    } else if (res$type == \"between\") {\n      # Create data for the filled area\n      fill_x <- seq(res$lower, res$upper, length.out = 200)\n      fill_y <- df(fill_x, df1 = df1, df2 = df2)\n      fill_df <- data.frame(x = fill_x, density = fill_y)\n      \n      p <- p + geom_area(data = fill_df, aes(x = x, y = density), \n                        fill = \"#3F6BB6\", alpha = 0.6)\n    }\n    \n    return(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n:::\n\n::: {.content-hidden when-format=\"html\"}\n\n![An example of the $F$-distribution with $d_1 = 10$ and $d_2 = 20$.](./FiguresPNG/f-fdist.png){width=\"80%\"}\n\n:::\n\n**Where to use:** The $F$-distribution is used for the ratio $(X/d_1)/(Y/d_2)$ of two independent random $\\chi^2$ variables $X\\sim \\chi^2(d_1)$ and $Y\\sim \\chi^2(d_2)$. It is commonly used as a reference distribution in hypothesis testing to compare two variances or more than two means, such as Analysis of Variance (ANOVA) tests.\n\n**Notation:** $X \\sim F(d_{1},d_{2})$\n\n**Parameters:** Two integers $d_1$ and $d_2$, where - $d_{1}$ degrees of freedom for the random variable $X\\sim \\chi^2(d_{1})$. - $d_{2}$ degrees of freedom for the random variable $Y\\sim \\chi^2(d_{2})$.\n\n| Quantity | Value | Notes |\n|:--------|:----------------------------|:-------------------|\n| **Mean** | $\\mathbb{E}(X) = \\dfrac{d_{2}}{d_{2}-2}$ | $d_2>2$ |\n| **Variance** | $\\mathbb{V}(X) = \\dfrac{2d_{2}(d_{1}+d_{2}-2)}{d_{1}(d_{2}-2)^2(d_{2}-4)}$ |  |\n| **PDF** | $\\mathbb{P}(X=x)=\\dfrac{\\sqrt{\\frac{(d_{1}x)^{d_{1}}d_{2}^{d_{2}}}{(d_{1}x+d_{2})^{d_{1}+d_{2}}}}}{x\\textrm{B}\\left(\\frac{d_{1}}{2},\\frac{d_{2}}{2}\\right)}$ | $\\textrm{B}(x,y)$ is the beta function |\n| **CDF** | $\\mathbb{P}(X \\leq x)=I_{\\frac{d_{1}x}{d_{1}x+d_{2}}}(\\frac{d_{1}}{2},\\frac{d_{2}}{2})$ | $I_{x}(a,b)$ is the regularized incomplete beta function |\n\n**Example:** You have three independent groups of data containing Cantor’s Confectionery chocolate bar lengths, and the total sample size is 90. From this, you would like to conduct an ANOVA test investigating if there is a statistically significant difference between the means of each group. You can find the degrees of freedom using the following methods:\n\n-   $\\textsf{numerator degrees of freedom = number of groups} - 1 = 3 - 1 = 2$\n\n-   $\\textsf{denominator degrees of freedom = sample size - number of groups} = 90 - 3 = 87$\n\nThe $F$ distribution, which will be used as a reference distribution for the ANOVA test, can be expressed as $X \\sim F(2,87)$, meaning the numerator degrees of freedom is $2$ and the denominator degrees of freedom is $87$.\n\n# Further reading {-}\n\n[This interactive element appears in Overview: Probability distributions. Please click this link to go to the guide.](../overviews/o-distributions.qmd)\n\n## Version history {-}\n\nv1.0: initial version created 04/25 by tdhc and Michelle Arnetta as part of a University of St Andrews VIP project.\n\n  - v1.1: moved to factsheet form and populated with material from [Overview: Probability distributions](../overviews/o-distributions.qmd) by tdhc.\n  \n[This work is licensed under CC BY-NC-SA 4.0.](https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}