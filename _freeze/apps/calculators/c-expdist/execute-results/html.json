{
  "hash": "72eff28aabc4da15d67c5a41c5c2641b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Calculator: Exponential distribution\"\nauthor: Michelle Arnetta and Tom Coleman\nformat: html\nabstract-title: Summary\nabstract: A calculator to work out cdfs for the exponential distribution.\nfilters: \n  - shinylive\nembed-resources: false\n---\n\n\n\n\n\n\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 640\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(ggplot2)\n\nui <- page_fluid(\n  title = \"Exponential distribution calculator\",\n  \n  layout_columns(\n    col_widths = c(4, 8),\n    \n    # Left column - Inputs\n    card(\n      card_header(\"Parameters\"),\n      card_body(\n        numericInput(\"rate\", \"Rate parameter (λ):\", value = 0.5, min = 0.01, step = 0.01),\n        # Removed the helpText about mean and variance\n        hr(),\n        radioButtons(\"prob_type\", \"Probability to calculate:\",\n                    choices = list(\"P(X ≤ x)\" = \"less\", \n                                  \"P(X ≥ x)\" = \"greater\", \n                                  \"P(x ≤ X ≤ y)\" = \"between\"),\n                    selected = \"less\"),\n        conditionalPanel(\n          condition = \"input.prob_type == 'less'\",\n          sliderInput(\"x_less\", \"x value:\", min = 0, max = 10, value = 2, step = 0.1)\n        ),\n        conditionalPanel(\n          condition = \"input.prob_type == 'greater'\",\n          sliderInput(\"x_greater\", \"x value:\", min = 0, max = 10, value = 2, step = 0.1)\n        ),\n        conditionalPanel(\n          condition = \"input.prob_type == 'between'\",\n          sliderInput(\"x_lower\", \"Lower bound (x):\", min = 0, max = 10, value = 1, step = 0.1),\n          sliderInput(\"x_upper\", \"Upper bound (y):\", min = 0, max = 10, value = 3, step = 0.1)\n        )\n      )\n    ),\n    \n    # Right column - Plot\n    card(\n      card_header(\"Exponential distribution plot\"),\n      card_body(\n        uiOutput(\"plot_title\"),\n        plotOutput(\"distPlot\", height = \"300px\")\n      )\n    )\n  ),\n  \n  # Bottom row - Results\n  card(\n    card_header(\"Results\"),\n    card_body(\n      textOutput(\"explanation\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # When rate changes, adjust the range of sliders\n  observe({\n    # For exponential distribution with parameter rate, the mean is 1/rate\n    # Set a reasonable max value based on this\n    max_x <- max(round(5 / input$rate, 1), 10)\n    \n    updateSliderInput(session, \"x_less\", max = max_x)\n    updateSliderInput(session, \"x_greater\", max = max_x)\n    updateSliderInput(session, \"x_lower\", max = max_x)\n    updateSliderInput(session, \"x_upper\", max = max_x)\n  })\n  \n  # Ensure that x_upper is always greater than or equal to x_lower\n  observe({\n    if (input$x_upper < input$x_lower) {\n      updateSliderInput(session, \"x_upper\", value = input$x_lower)\n    }\n  })\n  \n  # Display the plot title with distribution parameters\n  output$plot_title <- renderUI({\n    title <- sprintf(\"Exponential(λ = %.2f)\", input$rate)\n    tags$h4(title, style = \"text-align: center; margin-bottom: 15px;\")\n  })\n  \n  # Calculate the probability based on user selection\n  probability <- reactive({\n    if (input$prob_type == \"less\") {\n      prob <- pexp(input$x_less, rate = input$rate)\n      explanation <- sprintf(\"P(X ≤ %.1f) = %.6f or %.4f%%\", \n                           input$x_less, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"less\", x = input$x_less))\n      \n    } else if (input$prob_type == \"greater\") {\n      prob <- 1 - pexp(input$x_greater, rate = input$rate)\n      explanation <- sprintf(\"P(X ≥ %.1f) = %.6f or %.4f%%\", \n                           input$x_greater, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"greater\", x = input$x_greater))\n      \n    } else if (input$prob_type == \"between\") {\n      if (input$x_lower == input$x_upper) {\n        # For continuous distributions, P(X = a) = 0\n        prob <- 0\n      } else {\n        upper_prob <- pexp(input$x_upper, rate = input$rate)\n        lower_prob <- pexp(input$x_lower, rate = input$rate)\n        prob <- upper_prob - lower_prob\n      }\n      explanation <- sprintf(\"P(%.1f ≤ X ≤ %.1f) = %.6f or %.4f%%\", \n                           input$x_lower, input$x_upper, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"between\", \n                 lower = input$x_lower, upper = input$x_upper))\n    }\n  })\n  \n  # Display an explanation of the calculation\n  output$explanation <- renderText({\n    res <- probability()\n    return(res$explanation)\n  })\n  \n  # Generate the Exponential distribution plot\n  output$distPlot <- renderPlot({\n    # Determine the range for the x-axis\n    rate <- input$rate\n    max_x <- max(round(5 / rate, 1), 10)\n    \n    # Create data frame for plotting\n    x_values <- seq(0, max_x, length.out = 500)\n    density_values <- dexp(x_values, rate = rate)\n    df <- data.frame(x = x_values, density = density_values)\n    \n    # Create base plot\n    p <- ggplot(df, aes(x = x, y = density)) +\n      geom_line(size = 1, color = \"darkgray\") +\n      labs(x = \"Time (X)\", y = \"probability density function\") +\n      theme_minimal() +\n      theme(panel.grid.minor = element_blank())\n    \n    # Add shaded area based on selected probability type\n    res <- probability()\n    \n    if (res$type == \"less\") {\n      # Create data for the filled area\n      fill_x <- seq(0, res$x, length.out = 200)\n      fill_y <- dexp(fill_x, rate = rate)\n      fill_df <- data.frame(x = fill_x, density = fill_y)\n      \n      p <- p + geom_area(data = fill_df, aes(x = x, y = density), \n                        fill = \"#3F6BB6\", alpha = 0.6)\n      \n    } else if (res$type == \"greater\") {\n      # Create data for the filled area\n      fill_x <- seq(res$x, max_x, length.out = 200)\n      fill_y <- dexp(fill_x, rate = rate)\n      fill_df <- data.frame(x = fill_x, density = fill_y)\n      \n      p <- p + geom_area(data = fill_df, aes(x = x, y = density), \n                        fill = \"#3F6BB6\", alpha = 0.6)\n      \n    } else if (res$type == \"between\") {\n      # Create data for the filled area\n      fill_x <- seq(res$lower, res$upper, length.out = 200)\n      fill_y <- dexp(fill_x, rate = rate)\n      fill_df <- data.frame(x = fill_x, density = fill_y)\n      \n      p <- p + geom_area(data = fill_df, aes(x = x, y = density), \n                        fill = \"#3F6BB6\", alpha = 0.6)\n    }\n    \n    return(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n# Further reading {-}\n\n[This interactive element appears in Overview: Probability distributions. Please click this link to go to the guide.]\n\n## Version history {-}\n\nv1.0: initial version created 04/25 by tdhc and Michelle Arnetta as part of a University of St Andrews VIP project.\n  \n[This work is licensed under CC BY-NC-SA 4.0.](https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}