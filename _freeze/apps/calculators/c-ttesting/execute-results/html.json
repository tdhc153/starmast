{
  "hash": "caaae6dd5509c53dc23e6e4e3955a4da",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Calculator: $t$-testing\"\nauthor: Tom Coleman\nformat: html\nabstract-title: Summary\nabstract: Calculators to provide facility for all types of $t$-testing.\nfilters: \n  - shinylive\n---\n\n\n\n\n\n\n## $t$-statistic and degrees of freedom calculator\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 820\n\nlibrary(shiny)\nlibrary(bslib)\n\nui <- page_fluid(\n  title = \"t-statistic Calculator\",\n  \n  # Navigation buttons at the top\n  layout_columns(\n    col_widths = 12,\n    card(\n      card_body(\n        div(\n          style = \"text-align: center; margin-bottom: 20px;\",\n          actionButton(\"show_one_sample\", \"One sample t-test\", \n                      class = \"btn-primary\", style = \"margin-right: 10px;\"),\n          actionButton(\"show_two_sample\", \"Two-sample t-test\", \n                      class = \"btn-outline-primary\")\n        )\n      )\n    )\n  ),\n  \n  # One-sample t-test panel\n  conditionalPanel(\n    condition = \"input.current_tab == 'one_sample'\",\n    \n    # Input parameters and results side by side for one-sample t-test\n    layout_columns(\n      col_widths = c(6, 6),\n      \n      # Input parameters for one-sample t-test\n      card(\n        card_header(\"Sample Data\"),\n        card_body(\n          numericInput(\"n1\", \"Sample size (n)\", value = 30, min = 1, step = 1),\n          numericInput(\"xbar1\", \"Sample mean\", value = 50, step = 0.01),\n          numericInput(\"s1\", \"Sample standard deviation\", value = 10, min = 0.001, step = 0.01),\n          numericInput(\"mu0\", \"Population mean (μ₀)\", value = 45, step = 0.01),\n          hr(),\n          helpText(\"Calculate t-statistic for testing whether sample mean differs from population mean.\")\n        )\n      ),\n      \n      # Results for one-sample t-test\n      card(\n        card_header(\"Results\"),\n        card_body(\n          verbatimTextOutput(\"one_sample_results\")\n        )\n      )\n    )\n  ),\n  \n  # Two-sample t-test panel\n  conditionalPanel(\n    condition = \"input.current_tab == 'two_sample'\",\n    \n    # Input cards\n    layout_columns(\n      col_widths = c(4, 4, 4),\n      \n      # Sample 1 inputs\n      card(\n        card_header(\"Sample 1\"),\n        card_body(\n          numericInput(\"n1_two\", \"Sample Size (n₁)\", value = 25, min = 1, step = 1),\n          numericInput(\"xbar1_two\", \"Sample Mean (x̄₁)\", value = 52, step = 0.01),\n          numericInput(\"s1_two\", \"Sample Standard Deviation (s₁)\", value = 8, min = 0.001, step = 0.01)\n        )\n      ),\n      \n      # Sample 2 inputs\n      card(\n        card_header(\"Sample 2\"),\n        card_body(\n          numericInput(\"n2_two\", \"Sample Size (n₂)\", value = 30, min = 1, step = 1),\n          numericInput(\"xbar2_two\", \"Sample Mean (x̄₂)\", value = 48, step = 0.01),\n          numericInput(\"s2_two\", \"Sample Standard Deviation (s₂)\", value = 10, min = 0.001, step = 0.01)\n        )\n      ),\n      \n      # Test type settings\n      card(\n        card_header(\"Test Settings\"),\n        card_body(\n          radioButtons(\"test_type\", \"Test type:\",\n                      choices = list(\"Independent Samples\" = \"independent\",\n                                    \"Paired Samples\" = \"paired\"),\n                      selected = \"independent\"),\n          hr(),\n          helpText(\"Choose between independent samples (pooled t-test) or paired samples t-test.\")\n        )\n      )\n    ),\n    \n    # Results card at the bottom\n    layout_columns(\n      col_widths = 12,\n      card(\n        card_header(\"Results\"),\n        card_body(\n          verbatimTextOutput(\"two_sample_results\")\n        )\n      )\n    )\n  ),\n  \n  # Hidden input to track current tab\n  textInput(\"current_tab\", \"\", value = \"one_sample\", width = \"0px\"),\n  tags$style(\"#current_tab { display: none; }\"),\n  \n  # Dynamic CSS for button styling\n  uiOutput(\"button_css\")\n)\n\nserver <- function(input, output, session) {\n  \n  # Handle button clicks to switch between tabs\n  observeEvent(input$show_one_sample, {\n    updateTextInput(session, \"current_tab\", value = \"one_sample\")\n  })\n  \n  observeEvent(input$show_two_sample, {\n    updateTextInput(session, \"current_tab\", value = \"two_sample\")\n  })\n  \n  # Dynamic CSS for button styling\n  output$button_css <- renderUI({\n    if (input$current_tab == \"one_sample\") {\n      tags$style(\"\n        #show_one_sample { \n          background-color: #3F6BB6 !important; \n          border-color: #3F6BB6 !important; \n          color: white !important; \n        }\n        #show_two_sample { \n          background-color: transparent !important; \n          border-color: #3F6BB6 !important; \n          color: #3F6BB6 !important; \n        }\n      \")\n    } else {\n      tags$style(\"\n        #show_one_sample { \n          background-color: transparent !important; \n          border-color: #3F6BB6 !important; \n          color: #3F6BB6 !important; \n        }\n        #show_two_sample { \n          background-color: #3F6BB6 !important; \n          border-color: #3F6BB6 !important; \n          color: white !important; \n        }\n      \")\n    }\n  })\n  \n  # One-sample t-test calculations\n  output$one_sample_results <- renderText({\n    n <- input$n1\n    xbar <- input$xbar1\n    s <- input$s1\n    mu0 <- input$mu0\n    \n    # Calculate t-statistic\n    t_stat <- (xbar - mu0) / (s / sqrt(n))\n    \n    # Degrees of freedom\n    df <- n - 1\n    \n    # Standard error\n    se <- s / sqrt(n)\n    \n    result <- paste0(\n      \"T-statistic: \", round(t_stat, 6), \"\\n\",\n      \"Degrees of freedom: \", df, \"\\n\",\n      \"Standard error: \", round(se, 6), \"\\n\\n\",\n      \"Formula used: t = (x̄ - μ₀) / (s / √n)\\n\",\n      \"Where:\\n\",\n      \"  x̄ = \", xbar, \" (sample mean)\\n\",\n      \"  μ₀ = \", mu0, \" (population mean)\\n\",\n      \"  s = \", s, \" (sample standard deviation)\\n\",\n      \"  n = \", n, \" (sample size)\"\n    )\n    \n    return(result)\n  })\n  \n  # Two-sample t-test calculations\n  output$two_sample_results <- renderText({\n    n1 <- input$n1_two\n    xbar1 <- input$xbar1_two\n    s1 <- input$s1_two\n    n2 <- input$n2_two\n    xbar2 <- input$xbar2_two\n    s2 <- input$s2_two\n    test_type <- input$test_type\n    \n    if (test_type == \"independent\") {\n      # Independent samples t-test (pooled)\n      # Calculate pooled standard deviation\n      sp <- sqrt(((n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2))\n      \n      # Calculate standard error\n      se <- sp * sqrt(1/n1 + 1/n2)\n      \n      # Calculate t-statistic\n      t_stat <- (xbar1 - xbar2) / se\n      \n      # Degrees of freedom\n      df <- n1 + n2 - 2\n      \n      result <- paste0(\n        \"Independent samples t-test\\n\",\n        \"T-statistic: \", round(t_stat, 6), \"\\n\",\n        \"Degrees of freedom: \", df, \"\\n\",\n        \"Pooled standard deviation: \", round(sp, 6), \"\\n\",\n        \"Standard error: \", round(se, 6), \"\\n\\n\",\n        \"Formula used: t = (x̄₁ - x̄₂) / (sp × √(1/n₁ + 1/n₂))\\n\",\n        \"Where:\\n\",\n        \"  x̄₁ = \", xbar1, \", x̄₂ = \", xbar2, \"\\n\",\n        \"  sp = √[((n₁-1)s₁² + (n₂-1)s₂²) / (n₁+n₂-2)] = \", round(sp, 6), \"\\n\",\n        \"  n₁ = \", n1, \", n₂ = \", n2\n      )\n      \n    } else {\n      # Paired samples t-test\n      # For paired t-test, we assume the same sample size\n      n <- min(n1, n2)  # Use the smaller sample size\n      \n      # Calculate difference standard deviation (approximated from individual SDs)\n      # This is a simplified approach - in practice you'd have the actual differences\n      s_diff <- sqrt(s1^2 + s2^2)  # Approximate combined variance\n      \n      # Calculate standard error of differences\n      se <- s_diff / sqrt(n)\n      \n      # Calculate t-statistic\n      t_stat <- (xbar1 - xbar2) / se\n      \n      # Degrees of freedom for paired t-test\n      df <- n - 1\n      \n      result <- paste0(\n        \"Paired samples t-test\\n\",\n        \"T-statistic: \", round(t_stat, 6), \"\\n\",\n        \"Degrees of freedom: \", df, \"\\n\",\n        \"Standard error of differences: \", round(se, 6), \"\\n\",\n        \"Effective sample size: \", n, \"\\n\\n\",\n        \"Formula used: t = (x̄₁ - x̄₂) / (s_diff / √n)\\n\",\n        \"Where:\\n\",\n        \"  x̄₁ = \", xbar1, \", x̄₂ = \", xbar2, \"\\n\",\n        \"  s_diff ≈ √(s₁² + s₂²) = \", round(s_diff, 6), \" (approximated)\\n\",\n        \"  n = \", n, \" (pairs)\\n\\n\",\n        \"Note: This approximates paired t-test. Ideally, use actual difference data.\"\n      )\n    }\n    \n    return(result)\n  })\n}\n\nshinyApp(ui, server)\n\n\n```\n\n\n## $p$-value calculator\n\nUsing your $t$-statistic and degrees of freedom from the above calculator, use the below calculator to work out your $p$-value. \n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 730\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(ggplot2)\n\nui <- page_fluid(\n  title = \"T-test calculator\",\n  \n  layout_columns(\n    col_widths = c(4, 8),\n    \n    # Left column - Input parameters\n    card(\n      card_header(\"Input parameters\"),\n      card_body(\n        numericInput(\"tscore\", \"T-statistic\", value = 2.0, step = 0.01),\n        numericInput(\"df\", \"Degrees of freedom\", value = 20, min = 1, step = 1),\n        radioButtons(\"test_type\", \"Test type\",\n                    choices = list(\"Two-tailed\" = \"two\",\n                                  \"One-tailed (upper)\" = \"upper\",\n                                  \"One-tailed (lower)\" = \"lower\"),\n                    selected = \"two\"),\n        hr(),\n        helpText(\"This app calculates p-values for t-tests based on the t-distribution with specified degrees of freedom.\")\n      )\n    ),\n    \n    # Right column - Graphical representation\n    card(\n      card_header(\"Graphical representation\"),\n      card_body(\n        plotOutput(\"density_plot\", height = \"300px\")\n      )\n    )\n  ),\n  \n  # Results at the bottom\n  card(\n    card_header(\"T-test results\"),\n    card_body(\n      verbatimTextOutput(\"pvalue_result\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Calculate p-value based on test type\n  p_value <- reactive({\n    t <- input$tscore\n    df <- input$df\n    test <- input$test_type\n    \n    if (test == \"two\") {\n      p <- 2 * pt(-abs(t), df = df)\n      result <- paste0(\"Two-tailed p-value: \", round(p, 4))\n    } else if (test == \"upper\") {\n      p <- pt(t, df = df, lower.tail = FALSE)\n      result <- paste0(\"Upper-tailed p-value: \", round(p, 4))\n    } else if (test == \"lower\") {\n      p <- pt(t, df = df, lower.tail = TRUE)\n      result <- paste0(\"Lower-tailed p-value: \", round(p, 4))\n    }\n    \n    return(list(p = p, result = result, test = test))\n  })\n  \n  # Display p-value\n  output$pvalue_result <- renderText({\n    p_value()$result\n  })\n  \n  # Create density plot\n  output$density_plot <- renderPlot({\n    t <- input$tscore\n    df <- input$df\n    test <- p_value()$test\n    \n    # Generate x values for t-distribution\n    x <- seq(-4, 4, length.out = 1000)\n    y <- dt(x, df = df)\n    df_data <- data.frame(x = x, y = y)\n    \n    # Base plot\n    p <- ggplot(df_data, aes(x = x, y = y)) +\n      geom_line() +\n      labs(x = \"T-statistic\", y = \"Density\", \n           title = paste(\"T-distribution (df =\", df, \")\")) +\n      theme_minimal() +\n      theme(panel.grid.minor = element_blank()) +\n      geom_vline(xintercept = 0, linetype = \"dashed\", alpha = 0.5)\n    \n    # Add shaded area based on test type, using #3F6BB6 as the color\n    if (test == \"two\") {\n      # Two-tailed test: shade both tails\n      if (t > 0) {\n        p <- p + \n          geom_area(data = subset(df_data, x >= t), aes(x = x, y = y), fill = \"#3F6BB6\", alpha = 0.5) +\n          geom_area(data = subset(df_data, x <= -t), aes(x = x, y = y), fill = \"#3F6BB6\", alpha = 0.5) +\n          geom_vline(xintercept = t, color = \"#3F6BB6\") +\n          geom_vline(xintercept = -t, color = \"#3F6BB6\")\n      } else {\n        p <- p + \n          geom_area(data = subset(df_data, x <= t), aes(x = x, y = y), fill = \"#3F6BB6\", alpha = 0.5) +\n          geom_area(data = subset(df_data, x >= -t), aes(x = x, y = y), fill = \"#3F6BB6\", alpha = 0.5) +\n          geom_vline(xintercept = t, color = \"#3F6BB6\") +\n          geom_vline(xintercept = -t, color = \"#3F6BB6\")\n      }\n    } else if (test == \"upper\") {\n      # Upper-tailed test: shade area above t\n      p <- p + \n        geom_area(data = subset(df_data, x >= t), aes(x = x, y = y), fill = \"#3F6BB6\", alpha = 0.5) +\n        geom_vline(xintercept = t, color = \"#3F6BB6\")\n    } else if (test == \"lower\") {\n      # Lower-tailed test: shade area below t\n      p <- p + \n        geom_area(data = subset(df_data, x <= t), aes(x = x, y = y), fill = \"#3F6BB6\", alpha = 0.5) +\n        geom_vline(xintercept = t, color = \"#3F6BB6\")\n    }\n    \n    return(p)\n  })\n}\n\nshinyApp(ui, server)\n\n```\n\n# Further reading {-}\n\n[This interactive element appears in Guide: Introduction to hypothesis testing. Please click this link to go to the guide.](../../studyguides/hypothesistesting.qmd)\n\n## Version history {-}\n\nv1.0: initial version created 12/24 by Ellie Trace as part of a University of St Andrews VIP project.\n\n  - v1.1: updated to R Shiny interface by tdhc 04/25.\n  \n[This work is licensed under CC BY-NC-SA 4.0.](https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}