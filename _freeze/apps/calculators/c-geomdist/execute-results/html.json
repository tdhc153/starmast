{
  "hash": "f67df40f9b6e9d834042a00ff28c4717",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Calculator: Geometric distribution\"\nauthor: Michelle Arnetta and Tom Coleman\nformat: html\nabstract-title: Summary\nabstract: A calculator to work out pmfs and cdfs for the geometric distribution.\nfilters: \n  - shinylive\nembed-resources: false\n---\n\n\n\n\n\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 680\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(ggplot2)\n\nui <- page_fluid(\n  title = \"Geometric cistribution calculator\",\n  \n  layout_columns(\n    col_widths = c(4, 8),\n    \n    # Left column - Inputs\n    card(\n      card_header(\"Parameters\"),\n      card_body(\n        sliderInput(\"p\", \"Probability of success (p):\", min = 0.01, max = 1, value = 0.3, step = 0.01),\n        hr(),\n        radioButtons(\"prob_type\", \"Probability to Calculate:\",\n                    choices = list(\"P(X = x)\" = \"exact\", \n                                  \"P(X ≤ x)\" = \"less\", \n                                  \"P(X ≥ x)\" = \"greater\", \n                                  \"P(x ≤ X ≤ y)\" = \"between\"),\n                    selected = \"exact\"),\n        conditionalPanel(\n          condition = \"input.prob_type == 'exact'\",\n          sliderInput(\"x_exact\", \"x value:\", min = 0, max = 20, value = 3, step = 1)\n        ),\n        conditionalPanel(\n          condition = \"input.prob_type == 'less'\",\n          sliderInput(\"x_less\", \"x value:\", min = 0, max = 20, value = 3, step = 1)\n        ),\n        conditionalPanel(\n          condition = \"input.prob_type == 'greater'\",\n          sliderInput(\"x_greater\", \"x value:\", min = 0, max = 20, value = 3, step = 1)\n        ),\n        conditionalPanel(\n          condition = \"input.prob_type == 'between'\",\n          sliderInput(\"x_lower\", \"Lower bound (x):\", min = 0, max = 20, value = 2, step = 1),\n          sliderInput(\"x_upper\", \"Upper bound (y):\", min = 0, max = 20, value = 5, step = 1)\n        )\n      )\n    ),\n    \n    # Right column - Plot\n    card(\n      card_header(\"Geometric distribution plot\"),\n      card_body(\n        uiOutput(\"plot_title\"),\n        plotOutput(\"distPlot\", height = \"300px\")\n      )\n    )\n  ),\n  \n  # Bottom row - Results (removed the hr and helpText)\n  card(\n    card_header(\"Results\"),\n    card_body(\n      textOutput(\"explanation\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # When p changes, adjust the range of sliders\n  observe({\n    # For geometric distribution with parameter p, the mean is (1-p)/p\n    # Set a reasonable max value based on this\n    max_x <- max(round(3 * (1 - input$p) / input$p), 20)\n    \n    updateSliderInput(session, \"x_exact\", max = max_x)\n    updateSliderInput(session, \"x_less\", max = max_x)\n    updateSliderInput(session, \"x_greater\", max = max_x)\n    updateSliderInput(session, \"x_lower\", max = max_x)\n    updateSliderInput(session, \"x_upper\", max = max_x)\n  })\n  \n  # Ensure that x_upper is always greater than or equal to x_lower\n  observe({\n    if (input$x_upper < input$x_lower) {\n      updateSliderInput(session, \"x_upper\", value = input$x_lower)\n    }\n  })\n  \n  # Display the plot title with distribution parameters\n  output$plot_title <- renderUI({\n    title <- sprintf(\"Geometric(p = %.2f)\", input$p)\n    tags$h4(title, style = \"text-align: center; margin-bottom: 15px;\")\n  })\n  \n  # Calculate the probability based on user selection\n  probability <- reactive({\n    if (input$prob_type == \"exact\") {\n      prob <- dgeom(input$x_exact, prob = input$p)\n      explanation <- sprintf(\"P(X = %d) = %.6f or %.4f%%\", \n                           input$x_exact, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"exact\", x = input$x_exact))\n      \n    } else if (input$prob_type == \"less\") {\n      prob <- pgeom(input$x_less, prob = input$p)\n      explanation <- sprintf(\"P(X ≤ %d) = %.6f or %.4f%%\", \n                           input$x_less, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"less\", x = input$x_less))\n      \n    } else if (input$prob_type == \"greater\") {\n      # For P(X ≥ x), we need 1 - P(X < x) = 1 - P(X ≤ x-1)\n      if (input$x_greater == 0) {\n        prob <- 1  # P(X ≥ 0) is always 1\n      } else {\n        prob <- 1 - pgeom(input$x_greater - 1, prob = input$p)\n      }\n      explanation <- sprintf(\"P(X ≥ %d) = %.6f or %.4f%%\", \n                           input$x_greater, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"greater\", x = input$x_greater))\n      \n    } else if (input$prob_type == \"between\") {\n      if (input$x_lower == input$x_upper) {\n        # Exact probability for a single value\n        prob <- dgeom(input$x_lower, prob = input$p)\n      } else {\n        # P(x_lower ≤ X ≤ x_upper) = P(X ≤ x_upper) - P(X < x_lower) = P(X ≤ x_upper) - P(X ≤ x_lower-1)\n        upper_prob <- pgeom(input$x_upper, prob = input$p)\n        if (input$x_lower == 0) {\n          lower_prob <- 0\n        } else {\n          lower_prob <- pgeom(input$x_lower - 1, prob = input$p)\n        }\n        prob <- upper_prob - lower_prob\n      }\n      explanation <- sprintf(\"P(%d ≤ X ≤ %d) = %.6f or %.4f%%\", \n                           input$x_lower, input$x_upper, prob, prob * 100)\n      return(list(prob = prob, explanation = explanation, type = \"between\", \n                 lower = input$x_lower, upper = input$x_upper))\n    }\n  })\n  \n  # Display an explanation of the calculation\n  output$explanation <- renderText({\n    res <- probability()\n    return(res$explanation)\n  })\n  \n  # Generate the Geometric distribution plot\n  output$distPlot <- renderPlot({\n    # Determine the range for the x-axis\n    p <- input$p\n    max_x <- max(round(3 * (1 - p) / p), 20)\n    \n    # Create data frame for plotting\n    x_values <- 0:max_x\n    prob_mass <- dgeom(x_values, prob = p)\n    df <- data.frame(x = x_values, probability = prob_mass)\n    \n    # Create base plot\n    p <- ggplot(df, aes(x = x, y = probability)) +\n      geom_col(fill = \"lightgray\", color = \"darkgray\", alpha = 0.7) +\n      labs(x = \"number of failures before first success (X)\", y = \"probability mass function\") +\n      theme_minimal() +\n      theme(panel.grid.minor = element_blank()) +\n      scale_x_continuous(breaks = seq(0, max_x, by = ifelse(max_x > 20, 2, 1)))\n    \n    # Add shaded area based on selected probability type\n    res <- probability()\n    \n    if (res$type == \"exact\") {\n      highlight_x <- res$x\n      highlight_df <- df[df$x == highlight_x, ]\n      \n      p <- p + geom_col(data = highlight_df, aes(x = x, y = probability), \n                      fill = \"#3F6BB6\", color = \"darkgray\", alpha = 0.8)\n      \n    } else if (res$type == \"less\") {\n      highlight_x <- 0:res$x\n      highlight_df <- df[df$x %in% highlight_x, ]\n      \n      p <- p + geom_col(data = highlight_df, aes(x = x, y = probability), \n                      fill = \"#3F6BB6\", color = \"darkgray\", alpha = 0.8)\n      \n    } else if (res$type == \"greater\") {\n      highlight_x <- res$x:max_x\n      highlight_df <- df[df$x %in% highlight_x, ]\n      \n      p <- p + geom_col(data = highlight_df, aes(x = x, y = probability), \n                      fill = \"#3F6BB6\", color = \"darkgray\", alpha = 0.8)\n      \n    } else if (res$type == \"between\") {\n      highlight_x <- res$lower:res$upper\n      highlight_df <- df[df$x %in% highlight_x, ]\n      \n      p <- p + geom_col(data = highlight_df, aes(x = x, y = probability), \n                      fill = \"#3F6BB6\", color = \"darkgray\", alpha = 0.8)\n    }\n    \n    return(p)\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n# Further reading {-}\n\n[This interactive element appears in Overview: Probability distributions. Please click this link to go to the guide.]\n\n## Version history {-}\n\nv1.0: initial version created 04/24 by tdhc and Michelle Arnetta as part of a University of St Andrews VIP project.\n  \n[This work is licensed under CC BY-NC-SA 4.0.](https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}