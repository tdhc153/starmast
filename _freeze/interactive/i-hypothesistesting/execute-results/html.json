{
  "hash": "4870bb51c62f275b2a0f30d99258ea04",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Interactive: Hypothesis testing flowchart\"\nauthor: Tom Coleman and Ellie Trace\nabstract-title: Summary\nabstract: Interactive hypothesis testing flowchart\ndraft: true\nruntime: shiny\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\nui <- fluidPage(\n  titlePanel(\"☂️ Should You Bring an Umbrella?\"),\n  br(),\n  uiOutput(\"question_ui\"),\n  br(),\n  fluidRow(\n    column(3, actionButton(\"yes_btn\", \"✅ Yes\", width = \"100%\")),\n    column(3, actionButton(\"no_btn\", \"❌ No\", width = \"100%\")),\n    column(3, actionButton(\"back_btn\", \"⬅ Back\", width = \"100%\")),\n    column(3, actionButton(\"reset_btn\", \"🔄 Start Over\", width = \"100%\"))\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Define the decision tree structure\n  decision_tree <- list(\n    q1 = list(\n      question = \"Is it cloudy?\",\n      yes = \"q2\",\n      no = \"out1\"\n    ),\n    q2 = list(\n      question = \"Is rain in the forecast?\",\n      yes = \"out2\",\n      no = \"q3\"\n    ),\n    q3 = list(\n      question = \"Will you be outside for more than 30 minutes?\",\n      yes = \"out2\",\n      no = \"out3\"\n    ),\n    out1 = \"☀️ No umbrella needed. Enjoy your day!\",\n    out2 = \"🌧️ Yes, bring an umbrella!\",\n    out3 = \"🌤️ No need to bring an umbrella unless you're worried.\"\n  )\n  \n  # Use a character vector instead of a list for history\n  rv <- reactiveValues(\n    current_node = \"q1\",\n    history = character()\n  )\n  \n  observeEvent(input$yes_btn, {\n    node <- rv$current_node\n    if (is.list(decision_tree[[node]])) {\n      rv$history <- c(rv$history, node)\n      rv$current_node <- decision_tree[[node]]$yes\n    }\n  })\n  \n  observeEvent(input$no_btn, {\n    node <- rv$current_node\n    if (is.list(decision_tree[[node]])) {\n      rv$history <- c(rv$history, node)\n      rv$current_node <- decision_tree[[node]]$no\n    }\n  })\n  \n  observeEvent(input$back_btn, {\n    if (length(rv$history) > 0) {\n      rv$current_node <- tail(rv$history, 1)\n      rv$history <- head(rv$history, -1)\n    }\n  })\n  \n  observeEvent(input$reset_btn, {\n    rv$current_node <- \"q1\"\n    rv$history <- character()\n  })\n  \n  output$question_ui <- renderUI({\n    node <- rv$current_node\n    \n    if (!is.list(decision_tree[[node]])) {\n      return(\n        tagList(\n          h3(\"🌈 Outcome:\"),\n          p(decision_tree[[node]])\n        )\n      )\n    } else {\n      return(\n        tagList(\n          h3(decision_tree[[node]]$question)\n        )\n      )\n    }\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<iframe data-deferred-src=\"app780e2ab28608b4c10294beed01d6cbef/?w=&amp;__subapp__=1\" width=\"100%\" height=\"400\" class=\"shiny-frame shiny-frame-deferred\"></iframe>`{=html}\n:::\n:::\n\n\n\n\n\n\n## Version history {-}\n\nv1.0: initial version created 03/25 by tdhc.\n  \n[This work is licensed under CC BY-NC-SA 4.0.](https://creativecommons.org/licenses/by-nc-sa/4.0/?ref=chooser-v1)\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}